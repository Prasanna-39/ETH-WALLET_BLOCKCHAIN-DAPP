{"version":3,"sources":["dai-logo.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","account","daiTokenMock","balance","transactions","transfer","bind","assertThisInitialized","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","Contract","DaiTokenMock","abi","methods","balanceOf","utils","fromWei","toString","getPastEvents","fromBlock","toBlock","filter","from","console","log","recipient","amount","send","_this2","react_default","a","createElement","className","role","style","width","href","target","rel","src","daiLogo","color","onSubmit","event","preventDefault","value","toWei","height","margin","id","border","borderRadius","type","ref","input","placeholder","required","marginLeft","marginRight","scope","map","tx","key","returnValues","to","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7daa656.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dai-logo.dfbbfbb7.png\";","import React, { Component } from 'react';\nimport daiLogo from '../dai-logo.png';\nimport './App.css';\nimport Web3 from 'web3';\nimport DaiTokenMock from '../abis/DaiTokenMock.json'\n\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const daiTokenAddress = \"0x7232e51A9C2dA779DF815139FCCfac94Cf2a1042\" // Replace DAI Address Here\n    const daiTokenMock = new web3.eth.Contract(DaiTokenMock.abi, daiTokenAddress)\n    this.setState({ daiTokenMock: daiTokenMock })\n    const balance = await daiTokenMock.methods.balanceOf(this.state.account).call()\n    this.setState({ balance: web3.utils.fromWei(balance.toString(), 'Ether') })\n    const transactions = await daiTokenMock.getPastEvents('Transfer', { fromBlock: 0, toBlock: 'latest', filter: { from: this.state.account } })\n    this.setState({ transactions: transactions })\n    console.log(transactions)\n  }\n\n  transfer(recipient, amount) {\n    this.state.daiTokenMock.methods.transfer(recipient, amount).send({ from: this.state.account })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      daiTokenMock: null,\n      balance: 0,\n      transactions: []\n    }\n\n    this.transfer = this.transfer.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        \n        {/* <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\" >\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Crypto Wallet\n          </a>\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            About us\n          </a>\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"trade.html\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Trade Crypto\n          </a>\n        </nav> */}\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\" style={{ width: \"500px\" }}>\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <img src={daiLogo} width=\"150\" />\n                </a>\n                <h1 style={{color:'white'}}>{this.state.balance} DAI</h1>\n                <form onSubmit={(event) => {\n                  event.preventDefault()\n                  const recipient = this.recipient.value\n                  const amount = window.web3.utils.toWei(this.amount.value, 'Ether')\n                  this.transfer(recipient, amount)\n                }}>\n                  <div className=\"form-group mr-sm-2\" style={{\n                     width:'auto',\n                     height:'auto',margin:'auto'\n                  }}>\n                    <input\n                      id=\"recipient\"\n                      style={{ \n                        border: '3px solid black',\n                        borderRadius: '30px'\n                       }}\n                      type=\"text\"\n                      ref={(input) => { this.recipient = input }}\n                      className=\"form-control\"\n                      placeholder=\"Recipient Address\"\n                      required />\n                  </div>\n                  <h1></h1>\n                  <div className=\"form-group mr-sm-2\">\n                    <input\n                    \n                      id=\"amount\"\n                      style={{ \n                        border: '3px solid black',\n                        borderRadius: '30px'\n                       }}\n                      type=\"text\"\n                      ref={(input) => { this.amount = input }}\n                      className=\"form-control\"\n                      placeholder=\"Amount\"\n                      required />\n                  </div>\n                  \n                  <button type=\"submit\" className=\"btn btn-primary btn-block\" style={{ \n                        border: '3px solid black',\n                        borderRadius: '30px',\n                        width:'121px',\n                        marginLeft:'35%',\n                        marginRight:'25%',\n                       }}>Send</button>\n                </form>\n                <h1></h1>\n                <h1></h1>\n                <h1 style={{color:'white'}} className=\"glow\">Crypto Transaction Volume</h1>\n                <h1></h1>\n                <h1></h1>\n                <br></br>\n                <table className=\"table\">\n                  <thead>\n                    <tr>\n                      <th style={{color:'white'}} scope=\"col\">Recipient Public Address</th>\n                      <th style={{color:'white'}} scope=\"col\">Value</th>\n                    </tr>\n                  </thead>\n                  <tbody style={{color:'white'}}>\n                    { this.state.transactions.map((tx, key) => {\n                      return (\n                        <tr key={key} >\n                          <td>{tx.returnValues.to}</td>\n                          <td>{window.web3.utils.fromWei(tx.returnValues.value.toString(), 'Ether')}</td>\n                        </tr>\n                      )\n                    }) }\n                  </tbody>\n          \n                </table>\n                <h1></h1>\n                <h1></h1>\n              </div>\n            </main>\n          </div>\n        </div>\n        <h1></h1>\n        \n\n                       \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}